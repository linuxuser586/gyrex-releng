#####################
# GYREX: Server
#####################

#The type of the top level element we are building,  generally "feature"
#topLevelElementType = product
#The id of the top level element we are building
#topLevelElementId=org.eclipse.gyrex.features


############# PRODUCT/PACKAGING CONTROL #############
product=${builder}/../../../products/gyrex-server.product

# Don't run the packager
#runPackager=true

# Set the name of the archive that will result from the product build.
archiveNamePrefix=gyrex-incubation

# The prefix that will be used in the generated archive.
archivePrefix=gyrex

# The location under which all of the build output will be collected.
collectingFolder=gyrex

# enable generation of a p2 repository
p2.gathering=true
p2.compress=true
p2.flavor=org.eclipse.gyrex.server
p2.director.profile=GyrexServerProfile

# prefix for the repo name
# (used by buildhelpers.xml to initialize p2.metadata.repo.name and p2.artifact.repo.name)
p2.repo.name.prefix=Eclipse Gyrex Repository

# The list of {os, ws, arch} configurations to build.  This
# value is a '&' separated list of ',' separate triples.  For example,
#     configs=win32,win32,x86 & linux,motif,x86
# By default the value is *,*,*
#configs = *, *, *
#configs=win32, win32, x86 & \
#	win32,win32,x86_64 & \
#	win32,win32,wpf & \
#	linux, gtk, ppc & \
#	linux, gtk, x86 & \
#	linux, gtk, x86_64 & \
#	linux, motif, x86 & \
#	solaris, motif, sparc & \
#	solaris, gtk, sparc & \
#	aix, motif, ppc & \
#	hpux, motif, ia64_32 & \
#	macosx, carbon, ppc & \
#	macosx, carbon, x86 & \
#	macosx, cocoa, ppc & \
#	macosx, cocoa, x86 & \
#	macosx, cocoa, x86_64
configs=\
  win32, win32, x86 & \
  win32, win32, x86_64 & \
  linux, gtk, x86 & \
  linux, gtk, x86_64 & \
  macosx, cocoa, x86 & \
  macosx, cocoa, x86_64

# don't group configs but generate individual zips
#groupConfigurations=true

# The format of the archive.
archivesFormat =\
	win32, win32, x86-zip &\
	win32, win32, x86_64-zip &\
	linux, gtk, x86-tar & \
	linux, gtk, x86_64-tar &\
	macosx, cocoa, x86-tar & \
	macosx, cocoa, x86_64-tar

# Allow cycles involving at most one bundle that needs to be compiled with the rest being binary bundles.
allowBinaryCycles = true

# Sort bundles depenedencies across all features instead of just within a given feature.
flattenDependencies = true

# Parallel compilation, requires flattenedDependencies=true
parallelCompilation=true
parallelThreadCount=4
parallelThreadsPerProcessor=2

#Set to true if you want the output to be ready for an update jar (no site.xml generated)
#outputUpdateJars=true

# Set to true if you want to sign jars
#signJars=false
#sign.alias=<alias>
#sign.keystore=<keystore location>
#sign.storepass=<keystore password>
#sign.keypass=<key password>

# Arguments to send to the zip executable
zipargs=

# Arguments to send to the tar executable
tarargs=--owner=0 --group=0

# Control the creation of a file containing the version included in each configuration - on by default
#generateVersionsLists=false

# Enable the generation of source references into bundles
generateSourceReferences=true

# Generate individual source bundles
individualSourceBundles=true


############## BUILD NAMING CONTROL ################
# The directory into which the build elements are fetched and where
# the build takes place.
buildDirectory=${user.home}/gyrex.build

# Type of build.  Used in naming the build output.  Typically this value is
# one of I, N, M, S, ...
#   Gyrex note: should usually be inherited from main build script (see buildhelpers.xml)
buildType=I

# ID of the build.  Used in naming the build output.
#   Gyrex note: should usually be inherited from main build script (see buildhelpers.xml)
buildId=TestBuild

# Timestamp for the build.  Used in naming the build output
#   Gyrex note: should usually be inherited from main build script (see buildhelpers.xml)
timestamp=007

# Label for the build.  Used in naming the build output
#   Gyrex note: should usually be inherited from main build script (see buildhelpers.xml)
buildLabel=${buildType}-${buildId}-${timestamp}

# product qualifier
p2.product.qualifier=${buildLabel}

# The value to be used for the qualifier of a plugin or feature when you want to override the value computed by pde.
# The value will only be applied to plugin or features indicating build.properties, qualifier = context
#forceContextQualifier=<the value for the qualifier>

# Enable / disable the generation of a suffix for the features that use .qualifier.
# The generated suffix is computed according to the content of the feature
generateFeatureVersionSuffix=true


############# BASE CONTROL #############
# Settings for the base Eclipse components and Java class libraries
# against which you are building.
# Base location for anything the build needs to compile against.  For example,
# in most RCP app or a plug-in,  the baseLocation should be the location of a previously
# installed Eclipse against which the application or plug-in code will be compiled and the RCP delta pack.

# parent of all base things
base=${buildDirectory}
# Folder containing an unzipped Eclipse installation to compile against (old, non-p2 style)
baseLocation=${buildDirectory}/server
# Folder containing repositories whose content is needed to compile against
repoBaseLocation=${writableBuildRoot}/repos
# Folder where the content of the repositories from ${repoBaseLocation} will be made available as a form suitable to be compiled against
transformedRepoLocation=${writableBuildRoot}/transformedRepos

# Os/Ws/Arch/nl of the eclipse specified by baseLocation
baseos=win32
basews=win32
basearch=x86

# this property indicates whether you want the set of plug-ins and features to be considered during the build to be limited to the ones reachable from the features / plugins being built
filteredDependencyCheck=false

# this property indicates whether the resolution should be done in development mode (i.e. ignore multiple bundles with singletons)
resolution.devMode=false

# disable features not required for product build
skipBase=true
skipMaps=true
