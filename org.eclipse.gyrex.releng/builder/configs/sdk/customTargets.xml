<project name="gyrex-sdk-customTargets" default="noDefault">

	<!-- import default targets in order to only define overridden below -->
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>

	<!-- set default for common build scripts -->
	<property name="commonBuildScripts" location="../../common"/>

	<!-- import signing script -->
	<import file="${commonBuildScripts}/sign.xml"/>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<!-- this is easier for Gyrex; we assume maps are already local -->
		<!-- simply copy the map files from the releng project -->
		<property name="localMapsDir" value="${builder}/../../../maps"/>
		<copy todir="${buildDirectory}/maps">
			<fileset dir="${localMapsDir}"/>
		</copy>
	</target>

	<!-- checks if maps have already been fetched -->
	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<!-- log a message -->
		<echo message="Gyrex SDK build ${topLevelElementId} ${buildLabel}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<!-- change source references to pserver if ssh was used -->
		<replace file="${buildDirectory}/sourceReferences.properties" token=":extssh" value=":pserver"  />

		<!-- replace any tokens in source files -->
		<replace dir="${buildDirectory}/plugins" value="${buildLabel}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<!-- mirror target definition to local disc -->
		<antcall target="buildTargetPlatform"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<!-- collect compile logs -->
		<antcall target="gatherLogs" />

		<!-- sign the build -->
		<property name="signingArchive" location="${buildDirectory}/gyrex-sdk-bundles-for-signing-${buildId}.zip" />
		<property name="p2RepoWithArtifactsToSign" location="${buildDirectory}/buildRepo" />
		<createSigningArchive file="${signingArchive}" basedir="${p2RepoWithArtifactsToSign}" includesfile="${buildDirectory}/built.list"/>
		<signArchive file="${signingArchive}" projectId="gyrex" jobId="${buildType}-builds" email="gunnar@wagenknecht.org"/>

		<!-- unzip signed build over top of the repository -->
		<extractSignedArchive file="${signingArchive}" targetDir="${p2RepoWithArtifactsToSign}"/>

		<!-- pack signed artifacts and update p2 repo checksums -->
		<updateSignedRepo repodir="${p2RepoWithArtifactsToSign}" includesfile="${buildDirectory}/built.list"/>

		<!-- generate SDK repo for following builds -->
		<antcall target="createSdkRepo"/>

		<!-- clean up build directory in order to not confuse following builds -->
		<antcall target="cleanupBuildDirectory"/>
	</target>

    <!-- ===================================================================== -->

	<!-- - - - - - - - - - - - - - - - - -
          custom target: buildTargetPlatform
         - - - - - - - - - - - - - - - - - -->
    <target name="buildTargetPlatform" unless="skipTargetDefinition">
    	<!-- note: this requires pde.core (from Juno) in the base builder -->
		<pde.provisionTargetDefinition targetFile="${targetDefinition}" destinationDirectory="${repoBaseLocation}/target" clearDestination="false"/>
    </target>


	<!-- - - - - - - - - - - - - - - - - -
          custom target: createSdkRepo
         - - - - - - - - - - - - - - - - - -->
	<target name="createSdkRepo">
		<!-- generate sdk repo from build repo -->
		<p2.mirror source="file:${buildDirectory}/buildRepo" log="${buildDirectory}/${archiveNamePrefix}-${buildLabel}-sdkrepo.log" ignoreErrors="true">
			<destination compressed="true" name="${p2.repo.name.prefix} (Build ${buildLabel})" location="file:${buildDirectory}/${archiveNamePrefix}-${buildLabel}-sdkrepo"/>
			<!-- mirror only what's defined in features and only the latest version -->
			<slicingoptions followstrict="true" latestversiononly="true"/>
		</p2.mirror>
		<zip destfile="${buildDirectory}/${archiveNamePrefix}-${buildLabel}-sdkrepo.zip" filesonly="false" whenempty="skip" update="true">
			<zipfileset dir="${buildDirectory}/${archiveNamePrefix}-${buildLabel}-sdkrepo" includes="**/**" excludes="" />
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          custom target: cleanupBuildDirectory
         - - - - - - - - - - - - - - - - - -->
	<target name="cleanupBuildDirectory">
		<!-- move source fetched & used for compile out of build directory -->
		<mkdir dir="${buildDirectory}/sdk"/>
		<move todir="${buildDirectory}/sdk">
			<fileset dir="${buildDirectory}">
    			<include name="features/**"/>
    			<include name="plugins/**"/>
    			<include name="fetch_*"/>
    			<include name="assemble*"/>
    			<include name="built.list"/>
    			<include name="compile*"/>
    			<include name="package*"/>
    			<include name="directory.txt"/>
    			<include name="finalFeaturesVersions*"/>
    			<include name="finalPluginsVersions*"/>
			</fileset>
		</move>

		<!-- backup important files (just in case) -->
		<copy todir="${buildDirectory}/sdk">
			<fileset dir="${buildDirectory}">
    			<include name="label.properties"/>
    			<include name="*.log"/>
			</fileset>
		</copy>
		
	</target>

	<!-- collects compile logs -->
	<target name="gatherLogs">
		<echo message="Gather log files"/>
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<!-- gather logs does not seem to process feature includes correctly -->
		<!-- we therefore collect logs from SDK feature directly -->
		<!-- TODO: we may need to rethink our master/category handling feature -->
 		<ant antfile="${genericTargets}" target="gatherLogs">
	 		<property name="type" value="feature" />
	 		<property name="id" value="org.eclipse.gyrex.features.sdk" />
 		</ant>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

</project>

