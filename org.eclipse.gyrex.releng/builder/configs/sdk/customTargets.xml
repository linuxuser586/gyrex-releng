<project name="gyrex-sdk-customTargets" default="noDefault">

	<!-- import default targets in order to only define overridden below -->
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>

	<!-- set default for common build scripts -->
	<property name="commonBuildScripts" location="../../common"/>

	<!-- set default for gyrex build configsscripts -->
	<property name="commonBuildScripts" location="../../common"/>

	<!-- import signing script -->
	<import file="${commonBuildScripts}/sign.xml"/>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<!-- this is easier for Gyrex; we assume maps are already local -->
		<!-- simply copy the map files from the releng project -->
		<property name="localMapsDir" value="${builder}/../../../maps"/>
		<copy todir="${buildDirectory}/maps">
			<fileset dir="${localMapsDir}"/>
		</copy>
	</target>

	<!-- checks if maps have already been fetched -->
	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<!-- log a message -->
		<echo message="Gyrex SDK build ${topLevelElementId} ${buildLabel}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<!-- change source references to pserver if ssh was used -->
		<replace file="${buildDirectory}/sourceReferences.properties" token=":extssh" value=":pserver"  />

		<!-- replace any tokens in source files -->
		<replace dir="${buildDirectory}/plugins" value="${buildLabel}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<!-- mirror target definition to local disc -->
		<antcall target="buildTargetPlatform"/>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<!-- collect compile logs -->
		<antcall target="gatherLogs" />

		<!-- sign the build -->
		<property name="signingArchive" location="${buildDirectory}/gyrex-sdk-bundles-for-signing-${buildId}.zip" />
		<property name="p2RepoWithArtifactsToSign" location="${buildDirectory}/buildRepo" />
		<createSigningArchive file="${signingArchive}" basedir="${p2RepoWithArtifactsToSign}" includesfile="${buildDirectory}/built.list"/>
		<signArchive file="${signingArchive}" projectId="gyrex" jobId="${buildType}-builds" email="gunnar@wagenknecht.org"/>

		<!-- unzip signed build over top of the repository -->
		<extractSignedArchive file="${signingArchive}" targetDir="${p2RepoWithArtifactsToSign}"/>

		<!-- pack signed artifacts and update p2 repo checksums -->
		<updateSignedRepo repodir="${p2RepoWithArtifactsToSign}" includesfile="${buildDirectory}/built.list"/>

		<!-- generate the final repo -->
		<antcall target="assembleFinalRepo"/>
	</target>

    <!-- ===================================================================== -->

	<!-- - - - - - - - - - - - - - - - - -
          custom target: buildTargetPlatform
         - - - - - - - - - - - - - - - - - -->
    <target name="buildTargetPlatform" unless="skipTargetDefinition">
    	<property name="transformTargetDefinitionScript" value="${commonBuildScripts}/transformTargetDefinition.xsl"/>
        <xslt style="${transformTargetDefinitionScript}"
              in="${targetDefinition}"
              out="${buildDirectory}/mirror_target_platform.xml">
            <param name="destination" expression="${repoBaseLocation}/target"/>
        </xslt>
    	<!-- mirror target platform using p2 (will skip already mirrored pieces) -->
        <ant antfile="${buildDirectory}/mirror_target_platform.xml"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - -
          custom target: assembleFinalRepo
         - - - - - - - - - - - - - - - - - -->
	<target name="assembleFinalRepo">
		<!--p2.composite.repository location="file:${updateSite}"  /-->
		<p2.mirror source="file:${buildDirectory}/buildRepo" log="${buildDirectory}/finalRepoLog.txt" ignoreErrors="true">
			<destination compressed="true" name="${p2.repo.name}" location="file:${buildDirectory}/finalRepo"/>
		</p2.mirror>
		<zip destfile="${buildDirectory}/${buildLabel}/${archiveNamePrefix}-${buildLabel}-repo.zip" filesonly="false" whenempty="skip" update="true">
			<zipfileset dir="${buildDirectory}/finalRepo" includes="**/**" excludes="" />
		</zip>
	</target>

</project>
