<!--
    Copyright (c) 2011 Gunnar Wagenknecht and others.
    All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html.

    Contributors:
        Gunnar Wagenknecht - initial API and implementation
 -->
<project name="build-gyrex-repository" default="main" >

	<description>Builds the final Gyrex repository</description>

	<!-- define builder home dir -->
    <dirname file="${ant.file.build-gyrex-repository}" property="builder"/>

	<!-- load local build specific properties -->
    <!-- (we allow custom local properties file via -Dbuild.local.properties=... -->
    <property name="build.local.properties" location="${builder}/../../build.local.properties"/>
    <property file="${build.local.properties}" />

    <!-- load project build properties -->
    <property name="build.project.properties" location="${builder}/../../build.properties"/>
    <property file="${build.project.properties}" />

    <!-- load default build properties -->
    <property name="build.default.properties" location="${builder}/../../common/build.default.properties"/>
    <property file="${build.default.properties}" />

	<!-- set default for common build scripts -->
	<property name="commonBuildScripts" location="../../common"/>

	<!-- import common build helpers -->
	<import file="${commonBuildScripts}/buildhelpers.xml" />

	<!-- ==================================================================================
          target: main
          depends on: 'builder.prepare' to inherit common builder behavior
         ================================================================================== -->
    <target name="main" description="Builds the Gyrex Repository" depends="builder.prepare">
		<!-- print build information -->
		<echo message="Gyrex Repository build: ${buildLabel}"/>
    	
    	<!-- that's the location we mirror everything too -->
    	<mkdir dir="${repoBaseLocation}/${archiveNamePrefix}-${buildId}-repo"/> <!-- required by makeurl -->
		<makeurl property="resultRepoLocationUrl" file="${repoBaseLocation}/${archiveNamePrefix}-${buildId}-repo"/>    	

		<!-- at this time we capture everything that is in the build repository -->
		<p2.mirror source="file:${buildDirectory}/buildRepo" log="${buildDirectory}/${archiveNamePrefix}-${buildId}-repo.log" ignoreErrors="true">
			<destination compressed="true" name="${p2.repo.name.prefix} (Build ${buildId})" location="${resultRepoLocationUrl}"/>
		</p2.mirror>
		<zip destfile="${buildDirectory}/${buildLabel}/${archiveNamePrefix}-${buildId}-repo.zip" filesonly="false" whenempty="skip" update="true">
			<zipfileset dir="${repoBaseLocation}/${archiveNamePrefix}-${buildId}-repo" includes="**/**" excludes="" />
		</zip>
    	
    	<!-- generate additional publishing files (html pages & stuff) -->
    	<antcall target="generateAddtionalFilesToPublish"/>
    	
    	<!-- publish to eclipse.org downloads area -->
    	<antcall target="publishToDownloadArea"/>
    	
    </target>
	
	<!-- generates additional publishing files -->
	<target name="generateAddtionalFilesToPublish">
    	<fail unless="publishRepoStream" message="property publishRepoStream not set"/>
    	<fail unless="publishRepoBasePath" message="property publishRepoBasePath not set"/>
		
		<!-- give the build type a better name -->
		<condition property="buildTypeName" value="Release"><equals arg1="${buildType}" arg2="R"/></condition>
		<condition property="buildTypeName" value="Stable Build"><equals arg1="${buildType}" arg2="S"/></condition>
		<condition property="buildTypeName" value="Integration Build"><equals arg1="${buildType}" arg2="I"/></condition>
		<property name="buildTypeName" value="Build"/> 
		
		<!-- generate build index html -->
		<copy file="${builder}/template-eclipse.org/build-index.html" tofile="${buildDirectory}/${buildLabel}/index.html">
			<filterset>
				<filter token="BUILD_TYPE" value="${buildTypeName}"/>
				<filter token="BUILD_ID" value="${buildId}"/>
				<filter token="BUILD_LABEL" value="${buildLabel}"/>
				<filter token="BUILD_PATH" value="${publishRepoBasePath}/${buildLabel}"/>
				<filter token="SERVER_ARCHIVE_PREFIX" value="${archiveNamePrefix}"/>
				<filter token="REPO_ARCHIVE_PREFIX" value="${archiveNamePrefix}"/>
			</filterset>
		</copy>
	</target>
	
	<!-- publish bits to download area -->
    <target name="publishToDownloadArea" unless="skipPublish">
            
		<!-- check if we have *local* access on eclipse.org -->
		<condition property="publishToDownloadAreaIsPossible">
			<and>
				<!-- composite repo location must exist -->
				<available file="${publishBaseDirectory}" type="dir"/>
				
				<!-- build type must be allowed for publishing -->
				<or>
					<equals arg1="${buildType}" arg2="S"/>
					<equals arg1="${buildType}" arg2="R"/>
					<!-- note, we do publish those as well but we also need to clean-up old builds regulary -->
					<equals arg1="${buildType}" arg2="I"/>
					<equals arg1="${buildType}" arg2="M"/>
				</or>
			</and>
		</condition>

    	<!-- mirror repo -->
    	<antcall target="mirrorToPublishTarget"/>
    	
    	<!-- copy artifacts -->
    	<antcall target="copyArtifactsToPublishTarget"/>

	</target>
	
	<!-- mirrors p2 repository to download area -->
    <target name="mirrorToPublishTarget" if="publishToDownloadAreaIsPossible">
    	<fail unless="resultRepoLocationUrl" message="property resultRepoLocationUrl not set"/>
    	<fail unless="publishBaseDirectory" message="property publishBaseDirectory not set"/>
    	<fail unless="publishRepoStream" message="property publishRepoStream not set"/>
    	<fail unless="publishRepoBasePath" message="property publishRepoBasePath not set"/>
    	
    	<!-- generate all the relevant urls -->
    	<mkdir dir="${buildDirectory}/publishRepoTemplate"/>
    	<mkdir dir="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}"/>
    	<mkdir dir="${publishBaseDirectory}${publishRepoBasePath}"/>
		<makeurl property="templateRepoUrl" file="${buildDirectory}/publishRepoTemplate"/>    	
		<makeurl property="publishBuildRepoUrl" file="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}"/>
		<makeurl property="publishCompositeRepoUrl" file="${publishBaseDirectory}${publishRepoBasePath}"/>

    	<!-- generate template with proper mirror urls -->
		<copy file="${builder}/template-eclipse.org/artifacts.xml" tofile="${buildDirectory}/publishRepoTemplate/artifacts.xml">
			<filterset>
				<filter token="REPO_NAME" value="${p2.repo.name.prefix} (Build ${buildId})"/>
				<filter token="REPO_PATH" value="${publishRepoBasePath}/${buildLabel}"/>
			</filterset>
		</copy>

    	<!-- create composite if it doesn't exist -->
    	<p2.composite.artifact.repository.create location="${publishCompositeRepoUrl}" failonexists="false" name="${p2.repo.name.prefix} (${publishRepoStream} builds)" description="Composite repository with references to all ${publishRepoStream} builds."/>
    	<p2.composite.metadata.repository.create location="${publishCompositeRepoUrl}" failonexists="false" name="${p2.repo.name.prefix} (${publishRepoStream} builds)" description="Composite repository with references to all ${publishRepoStream} builds."/>

    	<!-- mirror to target (but only the bits that really changed) -->
		<p2.mirror source="${resultRepoLocationUrl}" log="${buildDirectory}/${buildLabel}/publish-repo.log" ignoreErrors="true">
			<destination compressed="true" name="${p2.repo.name.prefix} (Build ${buildId})" location="${publishBuildRepoUrl}" append="true" format="${resultRepoLocationUrl}" kind="metadata"/>
			<destination compressed="true" name="${p2.repo.name.prefix} (Build ${buildId})" location="${publishBuildRepoUrl}" append="true" format="${templateRepoUrl}" kind="artifact"/>
			<comparator comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator" comparatorLog="${buildDirectory}/${buildLabel}/publish-repo-compare.log">
				<!-- compare against the existing composite to not mirror duplicate bits -->
				<repository location="${publishCompositeRepoUrl}" />
			</comparator>
		</p2.mirror>

		<!-- add to composite repo -->
        <p2.composite.artifact.repository.add location="${publishCompositeRepoUrl}" child="${buildLabel}" />
        <p2.composite.metadata.repository.add location="${publishCompositeRepoUrl}" child="${buildLabel}" />
    	
    </target>

	<!-- copy artifacts to download area -->
	<target name="copyArtifactsToPublishTarget" if="publishToDownloadAreaIsPossible">
    	<fail unless="publishRepoStream" message="property publishRepoStream not set"/>
    	<fail unless="publishRepoBasePath" message="property publishRepoBasePath not set"/>

		<!-- copy everything from build label directory -->
		<copy todir="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}">
			<fileset dir="${buildDirectory}/${buildLabel}"/>
		</copy>
		
	</target>


</project>