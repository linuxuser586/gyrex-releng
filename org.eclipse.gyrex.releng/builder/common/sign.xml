<!--
    Copyright (c) 2011 Oracle and others.
    All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html.

    Contributors:
    	IBM - initial API and implementation (in e4/eclipse project)
    	Oracle - initial API and implementation (signing macro)
        Gunnar Wagenknecht - adapted to Gyrex
 -->
<!--

	This file performs signing of a build. Typically, signing is invoked from a
	specific build customTargets.xml (usually within postBuild step).

	Example:
		<property name="signingArchive" location="${buildDirectory}/my-zip-for-signing-${buildId}.zip" />
		<property name="p2RepoWithArtifactsToSign" location="${buildDirectory}/buildRepo" />
		<createSigningArchive file="${signingArchive}" basedir="${p2RepoWithArtifactsToSign}" includesfile="${buildDirectory}/built.list"/>
		<signArchive file="${signingArchive}" projectId="gyrex" jobId="${buildType}-builds" email="gunnar@wagenknecht.org"/>


	Inspired by:
		http://aniefer.blogspot.com/2011/01/releng-tricks-from-e4-and-orion.html
		https://bugs.eclipse.org/bugs/show_bug.cgi?id=332321

	Note, please do not customize this file or you'll loose the ability to simply
	upgrade to a new version of the build helpers.

-->
<project name="org.eclipse.gyrex.releng.build.signing" default="nodefault" >

	<description>Some helpers to implement building signing with PDE Build.</description>

	<!-- fake default target -->
	<target name="nodefault">
		<fail taskname="This script must not be called directly."/>
	</target>


	<!-- signs an archive -->
	<macrodef name="createSigningArchive" description="This macro creates the archive to sign based on a list of JARs.">
		<attribute name="file" description="Archive to create."/>
		<attribute name="baseDir" description="Base directory (used for resolving includes)."/>
		<attribute name="includesFile" description="File with includes."/>
		<sequential>
			<antcall target="createSigningArchive">
				<param name="signingArchive" value="@{file}"/>
				<param name="baseDir" value="@{baseDir}"/>
				<param name="includesFile" value="@{includesFile}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- creates an archive of items to sign -->
	<target name="createSigningArchive" depends="checkCanSign" unless="skipSigning" if="canSign">
		<antcall target="_createSigningArchiveUsingIncludesFile" />
		<antcall target="_createSigningArchiveWithoutIncludesFile" />
	</target>

	<!-- checks if the environment is capable of signing -->
	<target name="checkCanSign" unless="skipSign">
		<!-- check for required properties -->
		<fail unless="signingArchive" message="Property signingArchive is required an should specify the complete location of the archive to create."/>
		<!-- signing script must exist -->
		<available type="file" file="/usr/bin/sign" property="canSign"/>
	</target>

	<!-- prints a message when signing is not possible -->
	<target name="printSkipSigningMessage" depends="checkCanSign" unless="canSign">
		<echo message="Skipping signing request for archive ${signingArchive}. Signing can only be done on Eclipse.org build machine."/>
	</target>

	<!-- creates the archive based on a list of items to sign -->
	<target name="_createSigningArchiveUsingIncludesFile" if="includesFile">
		<echo message="Generating signing archive based on include file ${includesFile}."/>
		<zip zipfile="${signingArchive}" basedir="${baseDir}" includesFile="${includesFile}" />
	</target>

	<!-- creates the archive based on a full p2 repository -->
	<target name="_createSigningArchiveWithoutIncludesFile" unless="includesFile">
		<echo message="Generating signing archive based on p2 repository ${baseDir}."/>
		<fail unless="baseDir" message="No includes file is specified."/>
		<zip zipfile="${signingArchive}" basedir="${baseDir}" />
	</target>


	<!-- signs an archive -->
	<macrodef name="signArchive" description="This macro signs an archive. The archive will be copied to a staging area, signed by the signing script and copied back.">
		<attribute name="file" description="Archive to sign."/>
		<attribute name="projectId" description="Project identifier." default="commonBuild"/>
		<attribute name="jobId" description="Build job identifier." default="unnamedBuildJob"/>
		<attribute name="email" description="Email to send status too." default="nomail"/>
		<sequential>
			<antcall target="printSkipSigningMessage">
				<param name="signingArchive" value="@{file}"/>
			</antcall>
			<antcall target="signArchive">
				<param name="signingArchive" value="@{file}"/>
				<param name="projectFolder" value="@{projectId}"/>
				<param name="jobId" value="@{jobId}"/>
				<param name="stagingEmail" value="@{email}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- signs an archive -->
	<target name="signArchive" depends="checkCanSign" unless="skipSigning" if="canSign">
		<fail unless="projectFolder" message="Property projectFolder is required."/>
		<fail unless="jobId" message="Property jobId is required."/>

		<property name="stagingDirectory" value="/home/data/httpd/download-staging.priv/${projectFolder}/signing/${jobId}" />
		<property name="stagingArchiveName" value="${jobId}.zip"/>
		<property name="stagingEmail" value="nomail"/>

		<!-- prepare environment -->
		<delete dir="${stagingDirectory}" quiet="true"/>
		<mkdir dir="${stagingDirectory}"/>

		<!-- copy to staging area -->
		<echo message="Copying archive to signing staging area." />
		<exec dir="${buildDirectory}" executable="cp" output="${buildDirectory}/signing.txt">
			<arg path="${signingArchive}"/>
			<arg path="${stagingDirectory}/${stagingArchiveName}"/>
		</exec>

		<!-- invoke sign script and wait -->
		<!-- Usage: /usr/bin/sign <file> <mail|nomail> [outputDir] -->
		<!-- (must be executed on Eclipse.org in /home/data/httpd/download-staging.priv/<project>) -->
		<echo message="Invokeing sign script and waiting for finish." />
		<exec dir="${stagingDirectory}" executable="/bin/bash" output="${buildDirectory}/signing.txt" append="true">
			<arg line="/usr/bin/sign ${stagingDirectory}/${stagingArchiveName} ${stagingEmail} ${stagingDirectory}/signed"/>
		</exec>

		<!--Wait for build to be available -->
	    <waitfor maxwait="60" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
	        <available file="${stagingDirectory}/signed/${stagingArchiveName}"/>
	    </waitfor>

		<!-- check if build is available -->
		<available file="${stagingDirectory}/signed/${stagingArchiveName}" property="signedArchiveAvailable"/>
		<fail unless="signedArchiveAvailable" message="Timed out waiting for signing service."/>

		<!-- copy back -->
		<echo message="Copying signed archive back from staging area." />
		<exec dir="${buildDirectory}" executable="cp" output="${buildDirectory}/signing.txt" append="true">
			<arg value="-f"/>
			<arg path="${stagingDirectory}/signed/${stagingArchiveName}"/>
			<arg path="${signingArchive}"/>
		</exec>

		<!-- clean-up -->
		<delete dir="${stagingDirectory}" quiet="true"/>
	</target>

	<!-- extracts signed archive -->
	<macrodef name="extractSignedArchive" description="This macro extracts a signed archive back into a target directory (usually a p2 repository).">
		<attribute name="file" description="Archive to extract."/>
		<attribute name="targetDir" description="Target directory where to extract"/>
		<sequential>
			<antcall target="extractSignedArchive">
				<param name="signingArchive" value="@{file}"/>
				<param name="targetDir" value="@{targetDir}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- extracts signed archive -->
	<target name="extractSignedArchive" depends="checkCanSign" unless="skipSigning" if="canSign">
		<fail unless="targetDir" message="Property targetDir must be set."/>
		<unzip dest="${targetDir}" src="${signingArchive}"/>
	</target>

	<!-- extracts signed archive -->
	<macrodef name="updateSignedRepo" description="This macro packs the signed artifacts and updates their checksumes.">
		<attribute name="repoDir" description="The repository directory."/>
		<attribute name="includesFile" description="File with includes."/>
		<sequential>
			<antcall target="updateSignedRepo">
				<param name="repoDir" value="@{repoDir}"/>
				<param name="includesFile" value="@{includesFile}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- extracts signed archive -->
	<target name="updateSignedRepo">
		<fail unless="repoDir" message="Property repoDir must be set."/>
		<fail unless="includesFile" message="Property includesFile must be set."/>

		<!-- use eclipse.jarProcessor directly instead of the "pack" on p2.process.artifacts so that we
		     can specify the file to pack instead of doing everything -->
		<eclipse.jarProcessor inputFolder="${repoDir}" pack="true" >
			<file dir="${repoDir}" includesfile="${includesFile}" />
		</eclipse.jarProcessor>

		<!--update repository with new checksums for signed bundles -->
		<p2.process.artifacts repositoryPath="file://${repoDir}" />
		<delete file="${repoDir}/pack.properties" />
	</target>

</project>