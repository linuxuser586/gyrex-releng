<!--
    Copyright (c) 2009,2010 Gunnar Wagenknecht and others.
    All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html.

    Contributors:
        Gunnar Wagenknecht - initial API and implementation
 -->
<!--

	This file contains helper targets. It's not called directly but from your
	main build script.

	Note, please do not customize this file or you'll loose the ability to simply
	upgrade to a new version of the build helpers.

-->
<project name="org.eclipse.gyrex.releng.build.helpers" default="nodefault" >

	<description>Some helpers to simplify building with PDE Build.</description>

	<!-- set default branch/tag to check out for basebuilder (when property 'org.eclipse.releng.basebuilder.tag' is not set)  -->
	<property name="org.eclipse.releng.basebuilder.tag.default" value="R3_6_1"/>

	<!-- fake default target -->
	<target name="nodefault">
		<fail taskname="This script must not be called directly."/>
	</target>

	<!-- =================================
          target: bootstrap-org.eclipse.releng.basebuilder
         ================================= -->
	<target name="bootstrap-org.eclipse.releng.basebuilder" description="Performs bootstrapping of org.eclipse.releng.basebuilder from Eclipse CVS" unless="org.eclipse.releng.basebuilder.exists">

		<!-- set default branch/tag to check out (currently R3_6_1, occures twice in this file) -->
		<property name="org.eclipse.releng.basebuilder.tag" value="${org.eclipse.releng.basebuilder.tag.default}"/>

		<!-- default basebuilder location -->
		<property name="org.eclipse.releng.basebuilder" value="${writableBuildRoot}/org.eclipse.releng.basebuilder_${org.eclipse.releng.basebuilder.tag}" />

		<!-- check if we need to checkout basebuilder -->
		<condition property="org.eclipse.releng.basebuilder-checkout">
			<or>
				<!-- checkout if if doesn't exist -->
				<not>
					<available file="${org.eclipse.releng.basebuilder}" type="dir"/>
				</not>
				<!-- checkout fresh if it should come from HEAD and is within writableBuildRoot -->
				<and>
					<equals arg1="${org.eclipse.releng.basebuilder.tag}" arg2="HEAD"/>
					<contains string="${org.eclipse.releng.basebuilder}" substring="${writableBuildRoot}"/>
				</and>
				<!-- checkout fresh for S and R builds if within writableBuildRoot -->
				<and>
					<or>
						<equals arg1="${buildType}" arg2="S"/>
						<equals arg1="${buildType}" arg2="R"/>
					</or>
					<contains string="${org.eclipse.releng.basebuilder}" substring="${writableBuildRoot}"/>
				</and>
			</or>
		</condition>

		<!-- call sup targets to perform actually checkout if necessary -->
		<antcall target="org.eclipse.releng.basebuilder-checkout" />

		<!-- print message -->
		<echo level="info" message="[BOOTSTRAP] Using org.eclipse.releng.basebuilder: ${org.eclipse.releng.basebuilder}"/>
	</target>

	<!-- performs basebuilder checkout from CVS if org.eclipse.releng.basebuilder.exists is not set -->
	<target name="org.eclipse.releng.basebuilder-checkout" if="org.eclipse.releng.basebuilder-checkout">
		<!-- remove up any existing basebuilder -->
		<delete dir="${org.eclipse.releng.basebuilder}" quiet="true"/>
		<mkdir dir="${org.eclipse.releng.basebuilder}"/>

		<!-- perform checkout -->
		<echo level="info" message="[BOOTSTRAP] Perform checkout of org.eclipse.releng.basebuilder using tag/branch '${org.eclipse.releng.basebuilder.tag}'"/>
		<cvs
			cvsRoot=":pserver:anonymous@dev.eclipse.org:/cvsroot/eclipse"
			package="org.eclipse.releng.basebuilder"
			dest="${org.eclipse.releng.basebuilder}"
			failonerror="true"
			tag="${org.eclipse.releng.basebuilder.tag}">
		</cvs>

		<!-- relocate base builder to correct directory -->
		<move todir="${org.eclipse.releng.basebuilder}">
			<fileset dir="${org.eclipse.releng.basebuilder}/org.eclipse.releng.basebuilder"/>
		</move>
	</target>


	<!-- ===============================
         macro: eclipse.launch
         =============================== -->
	<macrodef name="eclipse.launch" description="This macro executes the default application of an eclipse installation.">
		<attribute name="app" description="The Eclipse application to launch."/>
		<attribute name="dir" description="The Eclipse installation dir."/>
		<element name="args" optional="true" />
		<sequential>
			<!-- We assume that the eclipse installation is specified -->
			<property name="@{app}.deploy.dir" location="@{dir}" />

			<!-- Find the Eclipse launcher and adding its location to the @{app}.launcher property -->
			<pathconvert property="@{app}.launcher">
				<first count="1">
					<sort>
						<fileset dir="${@{app}.deploy.dir}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar" />
						<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
							<date />
						</reverse>
					</sort>
				</first>
			</pathconvert>

			<!-- Launch the eclipse application -->
			<java fork="true" failonerror="true" jar="${@{app}.launcher}" dir="${@{app}.deploy.dir}">
				<!-- Uncomment to debug <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/> -->
				<args />
			</java>
		</sequential>
	</macrodef>

	<!-- ===============================
         macro: antrunner
         =============================== -->
	<macrodef name="antrunner" description="This macro launches the Eclipse Ant Runner.">
		<attribute name="target" description="The target to execute."/>
		<attribute name="buildfile" description="The build file."/>
		<attribute name="workspace" description="The Eclipse installation dir."/>
		<attribute name="dir" description="The Eclipse installation dir."/>
		<element name="jvmargs" optional="true" />
		<element name="antargs" optional="true" />
		<sequential>
			<eclipse.launch app="antrunner" dir="@{dir}">
				<args>
					<jvmarg value="-Xmx500m" />
					<jvmargs />
					<arg value="-data" />
					<arg value="@{workspace}" />
					<arg value="-application" />
					<arg value="org.eclipse.ant.core.antRunner" />
					<arg value="-buildfile" />
					<arg value="@{buildfile}" />
					<arg value="@{target}" />
					<antargs />
				</args>
			</eclipse.launch>
		</sequential>
	</macrodef>

	<!-- ===============================
         macro: basebuilder
         =============================== -->
	<macrodef name="basebuilder" description="This macro launches the Eclipse basebuilder.">
		<!-- note, this macro allows to have the basebuilder default location logic within buildhelpers.xml -->
		<attribute name="target" description="The target to execute."/>
		<attribute name="buildfile" description="The build file."/>
		<attribute name="workspace" description="The Eclipse instance dir."/>
		<element name="jvmargs" optional="true" />
		<element name="antargs" optional="true" />
		<sequential>
			<!-- initialize defaults using logic from bootstrap-org.eclipse.releng.basebuilder -->
			<property name="org.eclipse.releng.basebuilder.tag" value="${org.eclipse.releng.basebuilder.tag.default}"/>
			<property name="org.eclipse.releng.basebuilder" value="${writableBuildRoot}/org.eclipse.releng.basebuilder_${org.eclipse.releng.basebuilder.tag}" />
			<!-- initialize defaults for system properties which should be inherited -->
			<property name="eclipse.p2.mirrors" value="true"/>
			<!-- launch the antrunner -->
			<eclipse.launch app="antrunner" dir="${org.eclipse.releng.basebuilder}">
				<args>
					<jvmarg value="-Xmx500m" />
					<jvmarg value="-Declipse.p2.mirrors=${eclipse.p2.mirrors}" />
					<jvmargs />
					<arg value="-data" />
					<arg value="@{workspace}" />
					<arg value="-application" />
					<arg value="org.eclipse.ant.core.antRunner" />
					<arg value="-buildfile" />
					<arg value="@{buildfile}" />
					<arg value="@{target}" />
					<antargs />
				</args>
			</eclipse.launch>
		</sequential>
	</macrodef>

	<!-- =====================================================================
		  target: builder.prepare
		  depends on: builder.checkArgs, builder.init
		 ===================================================================== -->
	<target name="builder.prepare" depends="builder.checkArgs,builder.init" description="Performs necessary preparation/initialization for a specific builder.">
		<!-- ensure that the base folders exist -->
		<mkdir dir="${baseLocation}" />
		<mkdir dir="${repoBaseLocation}" />
		<mkdir dir="${transformedRepoLocation}" />
	</target>

	<!-- builder: ensure required properties are set -->
	<target name="builder.checkArgs" unless="builder">
		<echo message="-Dbuilder=&lt;path&gt; required." />
		<fail message="-Dbuilder=&lt;path&gt; required."/>
	</target>

	<!-- builder: initialize properties/defaults -->
	<target name="builder.init" depends="label.properties.init">
		<!-- read the builder specific build properties (after label properties init) -->
		<property file="${builder}/build.properties"/>

		<!-- create a pass file for the CVS client -->
		<touch file="${user.home}/.cvspass" />

		<!-- set the p2 repo names -->
		<property name="p2.repo.name.prefix" value="p2 repository"/>
		<property name="p2.metadata.repo.name" value="${p2.repo.name.prefix} (Build ${buildLabel})"/>
		<property name="p2.artifact.repo.name" value="${p2.repo.name.prefix} (Build ${buildLabel})"/>
	</target>

	<!-- =====================================================================
		  target: label.properties.init
		 ===================================================================== -->
	<target name="label.properties.init" description="Initializes the label.properties (if not already initialized)" depends="checkBuildDirectory">
		<!-- create and save properties identifying this build, re-use existing properties if available -->
		<available file="${buildDirectory}/label.properties" property="label.properties.exists" />
		<antcall target="create.label.properties" />
		<property file="${buildDirectory}/label.properties" />

		<!-- place a copy the label.properties into the output target directory -->
		<mkdir dir="${buildDirectory}/${buildLabel}"/>
		<copy todir="${buildDirectory}/${buildLabel}" file="${buildDirectory}/label.properties"/>
	</target>

	<!-- creates a label.properties file -->
	<target name="create.label.properties" unless="label.properties.exists" depends="checkBuildDirectory">
		<echo message="Initializing label.properties"/>

		<mkdir dir="${buildDirectory}" />
		<tstamp/>
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="I" />
		<property name="buildId" value="${buildType}${date}" />
		<property name="buildServer" value="LOCAL BUILD" />

		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}-${buildId}-${timestamp}" />

		<!--store the build label information in a file-->
		<echo file="${buildDirectory}/label.properties" append="true" >
			buildDirectory=${buildDirectory}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
			buildServer=${buildServer}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
			buildType=${buildType}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
			buildId=${buildId}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
			timestamp=${timestamp}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
			buildLabel=${buildLabel}
		</echo>

		<antcall target="addTo.label.properties.ifSet-forceContextQualifier"/>
		<antcall target="addTo.label.properties.ifSet-fetchTag"/>
	</target>

	<!-- adds forceContextQualifier to label.properties file only if set -->
	<target name="addTo.label.properties.ifSet-forceContextQualifier" if="forceContextQualifier">
		<echo file="${buildDirectory}/label.properties" append="true" >
			forceContextQualifier=${forceContextQualifier}
		</echo>
	</target>

	<!-- adds fetchTag to label.properties file only if set -->
	<target name="addTo.label.properties.ifSet-fetchTag" if="fetchTag">
		<echo file="${buildDirectory}/label.properties" append="true" >
			fetchTag=${fetchTag}
		</echo>
	</target>

	<!-- ensures property buildDirectory is set -->
	<target name="checkBuildDirectory" unless="buildDirectory">
		<echo message="Proptery 'buildDirectory' not set. Please set it using -DbuildDirectory=&lt;path&gt; required." />
		<fail/>
	</target>


	<!-- =================================
          target: clean
         ================================= -->
	<target name="clean" description="Performs general cleanup of the build area." unless="noclean">

		<!-- check if we need to do a full clean -->
		<condition property="clean-full">
			<!-- full clean on S and R builds -->
			<or>
				<equals arg1="${buildType}" arg2="S"/>
				<equals arg1="${buildType}" arg2="R"/>
			</or>
		</condition>

		<!-- call the actual clean targets -->
		<antcall target="clean-writableBuildRoot"/>
		<antcall target="clean-buildDirectory"/>

	</target>

	<!-- clean: full writableBuildRoot when property clean-full is set -->
	<target name="clean-writableBuildRoot" if="clean-full">
		<echo message="[CLEAN] Performing full clean: ${writableBuildRoot}"/>
		<!-- delete whole writableBuildRoot -->
		<delete dir="${writableBuildRoot}" quiet="true"/>
		<mkdir dir="${writableBuildRoot}"/>
	</target>

	<!-- clean: only buildDirectory unless property clean-full is set -->
	<target name="clean-buildDirectory" unless="clean-full" depends="checkBuildDirectory">
		<echo message="[CLEAN] Performing partial clean: ${buildDirectory}"/>
		<!-- delete buildDirectory -->
		<delete dir="${buildDirectory}" quiet="true"/>
		<mkdir dir="${buildDirectory}"/>
	</target>

</project>