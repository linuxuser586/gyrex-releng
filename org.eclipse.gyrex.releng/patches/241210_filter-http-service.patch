### Eclipse Workspace Patch 1.0
#P org.eclipse.rap.rwt
Index: src/org/eclipse/rwt/internal/engine/RWTServletContextListener.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.rwt/org.eclipse.rap.rwt/src/org/eclipse/rwt/internal/engine/RWTServletContextListener.java,v
retrieving revision 1.13
diff -u -r1.13 RWTServletContextListener.java
--- src/org/eclipse/rwt/internal/engine/RWTServletContextListener.java	12 Jun 2008 13:12:19 -0000	1.13
+++ src/org/eclipse/rwt/internal/engine/RWTServletContextListener.java	6 Nov 2008 12:35:58 -0000
@@ -166,7 +166,12 @@
         context.log( msg, ex );
       }
     } else {
-      ResourceManager.register( new DefaultResourceManagerFactory() );
+      try {
+        ResourceManager.register( new DefaultResourceManagerFactory() );
+      } catch( Exception ex ) {
+        String text = "Failed to register default resource manager factory.";
+        context.log( text, ex );
+      }
     }
   }
   
#P org.eclipse.rap.ui
Index: schema/rap/branding.exsd
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui/schema/rap/branding.exsd,v
retrieving revision 1.2
diff -u -r1.2 branding.exsd
--- schema/rap/branding.exsd	2 Jul 2008 12:43:17 -0000	1.2
+++ schema/rap/branding.exsd	6 Nov 2008 12:35:59 -0000
@@ -57,6 +57,7 @@
          <sequence>
             <element ref="additionalHeaders" minOccurs="0" maxOccurs="1"/>
             <element ref="associatedEntrypoints" minOccurs="0" maxOccurs="1"/>
+            <element ref="httpServiceSelector" minOccurs="0" maxOccurs="1"/>
          </sequence>
          <attribute name="id" type="string" use="required">
             <annotation>
@@ -278,6 +279,33 @@
       </complexType>
    </element>
 
+   <element name="httpServiceSelector">
+      <annotation>
+         <documentation>
+            The httpServiceSelector allow filtering of the HttpService instances with which to register applications.
+         </documentation>
+      </annotation>
+      <complexType>
+         <attribute name="filter" type="string">
+            <annotation>
+               <documentation>
+                  The httpServiceSelector allow filtering of the HttpService instances with which to register applications.
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="class" type="string">
+            <annotation>
+               <documentation>
+                  If used the class must be an instance of org.osgi.framework.Filter
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn="org.osgi.framework.Filter"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
    <annotation>
       <appInfo>
          <meta.section type="since"/>
#P org.eclipse.rap.ui.workbench
Index: Eclipse UI/org/eclipse/ui/internal/branding/Branding.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/branding/Branding.java,v
retrieving revision 1.5
diff -u -r1.5 Branding.java
--- Eclipse UI/org/eclipse/ui/internal/branding/Branding.java	3 Jul 2008 09:23:02 -0000	1.5
+++ Eclipse UI/org/eclipse/ui/internal/branding/Branding.java	6 Nov 2008 12:36:00 -0000
@@ -21,6 +21,7 @@
 import org.eclipse.rwt.branding.AbstractBranding;
 import org.eclipse.rwt.internal.resources.ResourceManager;
 import org.eclipse.ui.internal.servlet.EntryPointExtension;
+import org.osgi.framework.Filter;
 
 public final class Branding extends AbstractBranding {
 
@@ -41,6 +42,7 @@
   private IExitConfirmation exitConfirmation;
   private String themeId;
   private String brandingId;
+  private Filter serviceSelector;
   
   public Branding( final String contributor ) {
     this.contributor = contributor;
@@ -100,6 +102,10 @@
     this.brandingId = brandingId;
   }
   
+  public void setServiceSelector(Filter serviceSelector) {
+	this.serviceSelector = serviceSelector;
+  }
+  
   ///////////////////////////
   // AbstractBranding implementation
   
@@ -175,6 +181,10 @@
   public String getId() {
     return brandingId;
   }
+  
+  public Filter getServiceSelector() {
+	return serviceSelector;
+  }
 
   public void registerResources() throws IOException {
     if( favIcon != null && !"".equals( favIcon ) ) { //$NON-NLS-1$
Index: Eclipse UI/org/eclipse/ui/internal/branding/BrandingExtension.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/branding/BrandingExtension.java,v
retrieving revision 1.6
diff -u -r1.6 BrandingExtension.java
--- Eclipse UI/org/eclipse/ui/internal/branding/BrandingExtension.java	2 Jul 2008 13:17:15 -0000	1.6
+++ Eclipse UI/org/eclipse/ui/internal/branding/BrandingExtension.java	6 Nov 2008 12:36:00 -0000
@@ -20,9 +20,13 @@
 import org.eclipse.core.runtime.*;
 import org.eclipse.rap.ui.branding.IExitConfirmation;
 import org.eclipse.rwt.internal.branding.BrandingManager;
+import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.internal.WorkbenchPlugin;
 import org.eclipse.ui.internal.servlet.HttpServiceTracker;
 import org.osgi.framework.Bundle;
+import org.osgi.framework.Filter;
+import org.osgi.framework.FrameworkUtil;
+import org.osgi.framework.InvalidSyntaxException;
 
 public final class BrandingExtension {
 
@@ -64,6 +68,12 @@
     = "rel"; //$NON-NLS-1$
   private static final String ATT_VALUE 
     = "value"; //$NON-NLS-1$
+  private static final String ELEM_SERVICE_SELECTOR 
+    = "httpServiceSelector"; //$NON-NLS-1$
+  private static final String ATT_CLASS
+    = "class"; //$NON-NLS-1$
+  private static final String ATT_FILTER 
+    = "filter"; //$NON-NLS-1$
   
   public static void read() throws IOException {
     IExtensionRegistry registry = Platform.getExtensionRegistry();
@@ -119,7 +129,13 @@
         branding.addEntryPointId( entryPointId );
       }
     }
-    registerServletName( servletName );
+    //  loop through optional service selectors
+    IConfigurationElement[] serviceSelectors = element.getChildren( ELEM_SERVICE_SELECTOR );
+    if( serviceSelectors.length > 0 ) {
+    	IConfigurationElement serviceSelector = serviceSelectors[ 0 ];
+    	readServiceSelector( branding, serviceSelector );
+    }
+    registerServletName( servletName, branding.getServiceSelector() );
     BrandingManager.register( branding );
   }
 
@@ -160,10 +176,55 @@
     return result;
   }
 
-  private static void registerServletName( final String servletName ) {
+  private static void readServiceSelector(Branding branding, IConfigurationElement serviceSelectorElement) 
+  {
+	Filter serviceSelector = null;
+	String clazz = serviceSelectorElement.getAttribute( ATT_CLASS );
+	if (clazz != null) {
+		try {
+			serviceSelector = (org.osgi.framework.Filter) serviceSelectorElement.createExecutableExtension(ATT_CLASS);
+		} catch (CoreException e) {
+	        String text =   "Could not instantiate http service selector ''{0}'' for branding ''{1}''.";
+	        Object[] param = new Object[] { clazz, branding.getId() };
+	        String msg = MessageFormat.format( text, param );
+	        Status status = new Status( IStatus.ERROR,
+	                                    PlatformUI.PLUGIN_ID,
+	                                    IStatus.OK,
+	                                    msg,
+	                                    e );
+	        WorkbenchPlugin.getDefault().getLog().log( status );
+			return;
+		}
+	} else {
+		String filter = serviceSelectorElement.getAttribute( ATT_FILTER );
+		if (filter == null)
+			return;
+		
+		try {
+			serviceSelector = FrameworkUtil.createFilter(filter);
+		} catch (InvalidSyntaxException e) {
+	        String text =   "Could not create http service selector ''{0}'' for branding ''{1}''.";
+	        Object[] param = new Object[] { filter, branding.getId() };
+	        String msg = MessageFormat.format( text, param );
+	        Status status = new Status( IStatus.ERROR,
+	                                    PlatformUI.PLUGIN_ID,
+	                                    IStatus.OK,
+	                                    msg,
+	                                    e );
+	        WorkbenchPlugin.getDefault().getLog().log( status );
+			return;
+		}
+	}
+	
+	if(serviceSelector != null) {
+		branding.setServiceSelector(serviceSelector);
+	}
+  }
+
+  private static void registerServletName( final String servletName, final Filter httpServiceSelector ) {
     WorkbenchPlugin workbench = WorkbenchPlugin.getDefault();
     HttpServiceTracker httpServiceTracker = workbench.getHttpServiceTracker();
-    httpServiceTracker.addServletAlias( servletName );
+    httpServiceTracker.addServletAlias( servletName, httpServiceSelector );
   }
   
   private static void registerDefaultServletName() {
@@ -178,7 +239,7 @@
       }
     }
     if( !found ) {
-      registerServletName( BrandingManager.DEFAULT_SERVLET_NAME );
+      registerServletName( BrandingManager.DEFAULT_SERVLET_NAME, null );
     }
   }
 
Index: Eclipse UI/org/eclipse/ui/internal/servlet/HttpServiceTracker.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/servlet/HttpServiceTracker.java,v
retrieving revision 1.3
diff -u -r1.3 HttpServiceTracker.java
--- Eclipse UI/org/eclipse/ui/internal/servlet/HttpServiceTracker.java	13 Jun 2008 06:31:17 -0000	1.3
+++ Eclipse UI/org/eclipse/ui/internal/servlet/HttpServiceTracker.java	6 Nov 2008 12:36:00 -0000
@@ -11,16 +11,15 @@
 package org.eclipse.ui.internal.servlet;
 
 import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Iterator;
+import java.util.*;
+import java.util.Map.Entry;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.http.registry.HttpContextExtensionService;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.internal.WorkbenchPlugin;
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
+import org.osgi.framework.*;
 import org.osgi.service.http.HttpContext;
 import org.osgi.service.http.HttpService;
 import org.osgi.util.tracker.ServiceTracker;
@@ -30,7 +29,7 @@
   public static final String ID_HTTP_CONTEXT = "org.eclipse.rap.httpcontext";
 
   private HttpService httpService;
-  private final ArrayList servletAliases = new ArrayList();
+  private final Map/*<String, Filter>*/ servletAliases = new HashMap/*<String, Filter>*/();
 
   public HttpServiceTracker( final BundleContext context ) {
     super( context, HttpService.class.getName(), null );
@@ -42,10 +41,18 @@
 
     if(servletAliases.size() == 0) {
     	// register default servlet
-    	servletAliases.add(DEFAULT_SERVLET);
+    	servletAliases.put(DEFAULT_SERVLET, null);
     }
-    for( Iterator it = servletAliases.iterator(); it.hasNext(); ) {
-      String name = ( String )it.next();
+    for( Iterator it = servletAliases.entrySet().iterator(); it.hasNext(); ) {
+      Entry entry = ( Entry )it.next();
+      String name = ( String )entry.getKey();
+      Filter serviceSelector = ( Filter )entry.getValue();
+      
+      // skip services that should not be used
+      if(serviceSelector != null && !serviceSelector.match(reference))
+    	  continue;
+      
+      // register
       try {
         RequestHandler handler = new RequestHandler();
         httpService.registerServlet( "/" + name, handler, null, rapContext ); //$NON-NLS-1$
@@ -75,14 +82,33 @@
   public void removedService( final ServiceReference reference,
                               final Object service )
   {
-    for( Iterator iterator = servletAliases.iterator(); iterator.hasNext(); ) {
-      String name = ( String )iterator.next();
+    for( Iterator iterator = servletAliases.entrySet().iterator(); iterator.hasNext(); ) {
+      Entry entry = ( Entry )iterator.next();
+      String name = ( String )entry.getKey();
+      Filter serviceSelector = ( Filter )entry.getValue();
+        
+      // skip services that should not be used
+      if(serviceSelector != null && !serviceSelector.match(reference))
+    	  continue;
+        
+      // unregister
       httpService.unregister( "/" + name ); //$NON-NLS-1$
     }
     super.removedService( reference, service );
   }
 
-  public void addServletAlias(final String name) {
-    servletAliases.add( name );
+  /**
+   * Adds a servlet alias to register.
+   * 
+   * @param name
+   *            the servlet alias name
+   * @param httpServiceSelector
+   *            an optional filter to select the HttpService instances to
+   *            register with
+   */
+  public void addServletAlias(final String name, Filter httpServiceSelector) {
+	//TODO: should we sanitize name (eg. remove leading '/')?; 
+	//      maybe it's better to allow a full alias to be specified here  
+    servletAliases.put( name, httpServiceSelector );
   }
 }
Index: Eclipse UI/org/eclipse/ui/internal/servlet/ResourceManagerFactory.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/servlet/ResourceManagerFactory.java,v
retrieving revision 1.5
diff -u -r1.5 ResourceManagerFactory.java
--- Eclipse UI/org/eclipse/ui/internal/servlet/ResourceManagerFactory.java	1 Jul 2008 17:16:01 -0000	1.5
+++ Eclipse UI/org/eclipse/ui/internal/servlet/ResourceManagerFactory.java	6 Nov 2008 12:36:00 -0000
@@ -28,8 +28,7 @@
 import org.eclipse.rwt.resources.IResourceManager;
 import org.eclipse.rwt.resources.IResourceManagerFactory;
 import org.eclipse.ui.internal.WorkbenchPlugin;
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
+import org.osgi.framework.*;
 import org.osgi.service.http.*;
 
 
@@ -69,11 +68,6 @@
     implements IResourceManager, Adaptable
   {
     private final IResourceManager resourceManager;
-    // TODO [fappel]: think of a better solution
-    // This field is set to true the first time the HttpService is used.
-    // If the HttpService isn't available anymore we assume that the
-    // system is in shutdown process.
-    private boolean httpServiceLoaded;
 
     private ResourceManagerWrapper( final IResourceManager internal ) {
       this.resourceManager = internal;
@@ -117,17 +111,17 @@
 
     public void register( final String name ) {
       resourceManager.register( name );
-      registerAtHttpService( name );
+      registerAtHttpServices( name );
     }
     
     public void register( final String name, final InputStream is ) {
       resourceManager.register( name, is );
-      registerAtHttpService( name );
+      registerAtHttpServices( name );
     }
 
     public void register( final String name, final String charset ) {
       resourceManager.register( name, charset );
-      registerAtHttpService( name );
+      registerAtHttpServices( name );
     }
 
     public void register( final String name,
@@ -135,7 +129,7 @@
                           final RegisterOptions options )
     {
       resourceManager.register( name, charset, options );
-      registerAtHttpService( name );
+      registerAtHttpServices( name );
     }
     
     public void register( String name,
@@ -144,85 +138,62 @@
                           RegisterOptions options )
     {
       resourceManager.register( name, is, charset, options );
-      registerAtHttpService( name );
+      registerAtHttpServices( name );
     }
 
     public void setContextLoader( final ClassLoader classLoader ) {
       resourceManager.setContextLoader( classLoader );
     }
 
-    private void registerAtHttpService( final String name ) {
-      String contextRoot = ContextProvider.getWebAppBase();
-      IPath path = new Path( name ).removeLastSegments( 1 );
-      IPath location = new Path( contextRoot ).append( path );
-      HttpService httpService = getHttpService();
-      if( httpService != null ) {
-        HttpContext httpContext = getHttpContext();
-        HttpContext wrapper = new HttpContextWrapper( httpContext );
-        try {
-          httpService.registerResources( "/" + path.toString(),
-                                         location.toString(),
-                                         wrapper );
-        } catch( final NamespaceException ignore ) {
-          // TODO: [fappel] for the first shot we simply ignore the exception
-          //                that's thrown if we register an alias twice. A better
-          //                approach could be to take track of the namespaces that
-          //                have already been registered
-        }
-      }
-    }
-
-    private HttpContext getHttpContext() {
-      String contextExtension = HttpContextExtensionService.class.getName();
-      BundleContext context = WorkbenchPlugin.getDefault().getBundleContext();
-      ServiceReference ref = context.getServiceReference( contextExtension );
-      HttpContextExtensionService service
-        = ( HttpContextExtensionService )context.getService( ref );
-      String id = HttpServiceTracker.ID_HTTP_CONTEXT;
-      HttpContext result = null;
-      ServiceReference httpServiceRef = getHttpServiceRef();
-      if( httpServiceRef != null ) {
-        result = service.getHttpContext( httpServiceRef, id );
-      } else {
-        throw new IllegalStateException( "HttpService is not available." );
-      }
-      return result;
-    }
-
-    private HttpService getHttpService() {
-      ServiceReference reference = getHttpServiceRef();
-      BundleContext context = WorkbenchPlugin.getDefault().getBundleContext();
-      HttpService result = null;
-      // TODO [fappel]: think of a better solution
-      // This field httpServiceLoaded is set to true the first time the
-      // HttpService is used. If the HttpService isn't available anymore we
-      // assume that the system is in shutdown process. NPE would prevent
-      // a proper shutdown of the workbench due to some unneeded image
-      // registration.
-      if( reference != null ) {
-        result = ( HttpService )context.getService( reference );
-        httpServiceLoaded = true;
-      } else if( !httpServiceLoaded ) {
-        throw new IllegalStateException( "HttpService is not available." );
-      }
-      return result;
-    }
-
-    private ServiceReference getHttpServiceRef() {
-      BundleContext context = WorkbenchPlugin.getDefault().getBundleContext();
-      ServiceReference result = null;
-      String serviceName = HttpService.class.getName();
-      try {
-        result = context.getServiceReference( serviceName );
-      } catch( final IllegalStateException ignore ) {
-        // TODO [fappel]: think of a better solution
-        // ignore exception: nothing we can do about, if called during
-        // shutdown. Calling methods have to handle the return value null.
-        // Throwing the Exception would prevent a proper shutdown of the
-        // workbench due to unneeded image registration.
-      }
-      return result;
-    }
+    private void registerAtHttpServices( final String name ) {
+		String contextRoot = ContextProvider.getWebAppBase();
+		IPath path = new Path(name).removeLastSegments(1);
+		IPath location = new Path(contextRoot).append(path);
+
+		// loop through all HttpService instances
+		BundleContext context = WorkbenchPlugin.getDefault().getBundleContext();
+		try {
+			ServiceReference[] references = context.getServiceReferences(HttpService.class.getName(), null);
+			for (int i = 0; i < references.length; i++) {
+				ServiceReference reference = references[i];
+				// get service instance
+				HttpService httpService = (HttpService) context.getService(reference);
+				if (httpService == null)
+					continue;
+				try {
+					// get http context extension service
+					ServiceReference contextServiceRef = context.getServiceReference(HttpContextExtensionService.class.getName());
+					if (contextServiceRef == null)
+						continue;
+
+					try {
+						HttpContextExtensionService contextExtensionService = (HttpContextExtensionService) context.getService(contextServiceRef);
+						if (contextExtensionService == null)
+							continue;
+
+						HttpContext httpContext = new HttpContextWrapper(contextExtensionService.getHttpContext(reference, HttpServiceTracker.ID_HTTP_CONTEXT));
+						try {
+							httpService.registerResources("/" + path.toString(), location.toString(), httpContext);
+						} catch (final NamespaceException ignore) {
+							// TODO: [fappel] for the first shot we simply ignore the exception
+							//                that's thrown if we register an alias twice. A better
+							//                approach could be to take track of the namespaces that
+							//                have already been registered
+						}
+						
+						
+					} finally {
+						context.ungetService(contextServiceRef);
+					}
+
+				} finally {
+					context.ungetService(reference);
+				}
+			}
+		} catch (InvalidSyntaxException e) {
+			// should not happen, we don't use a Filter
+		}
+	}
 
     public InputStream getRegisteredContent( final String name ) {
       return resourceManager.getRegisteredContent( name );
Index: Eclipse UI/org/eclipse/ui/internal/servlet/EngineConfigWrapper.java
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/servlet/EngineConfigWrapper.java,v
retrieving revision 1.4
diff -u -r1.4 EngineConfigWrapper.java
--- Eclipse UI/org/eclipse/ui/internal/servlet/EngineConfigWrapper.java	13 Jun 2008 06:31:17 -0000	1.4
+++ Eclipse UI/org/eclipse/ui/internal/servlet/EngineConfigWrapper.java	6 Nov 2008 12:36:00 -0000
@@ -10,18 +10,39 @@
  ******************************************************************************/
 package org.eclipse.ui.internal.servlet;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.lang.reflect.Field;
 import java.net.URL;
 import java.text.MessageFormat;
 
-import org.eclipse.core.runtime.*;
-import org.eclipse.rwt.internal.*;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtensionPoint;
+import org.eclipse.core.runtime.IExtensionRegistry;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.rwt.internal.AdapterFactoryRegistry;
+import org.eclipse.rwt.internal.EngineConfig;
+import org.eclipse.rwt.internal.IEngineConfig;
 import org.eclipse.rwt.internal.engine.RWTServletContextListener;
-import org.eclipse.rwt.internal.lifecycle.*;
+import org.eclipse.rwt.internal.lifecycle.EntryPointManager;
+import org.eclipse.rwt.internal.lifecycle.LifeCycleFactory;
+import org.eclipse.rwt.internal.lifecycle.PhaseListenerRegistry;
+import org.eclipse.rwt.internal.lifecycle.RWTLifeCycle;
+import org.eclipse.rwt.internal.lifecycle.UICallBackServiceHandler;
 import org.eclipse.rwt.internal.resources.ResourceManager;
 import org.eclipse.rwt.internal.resources.ResourceRegistry;
-import org.eclipse.rwt.internal.service.*;
+import org.eclipse.rwt.internal.service.LifeCycleServiceHandler;
+import org.eclipse.rwt.internal.service.LifeCycleServiceHandlerConfigurer;
+import org.eclipse.rwt.internal.service.ServiceManager;
+import org.eclipse.rwt.internal.service.SettingStoreManager;
 import org.eclipse.rwt.internal.theme.ResourceLoader;
 import org.eclipse.rwt.internal.theme.ThemeManager;
 import org.eclipse.rwt.lifecycle.PhaseListener;
@@ -138,7 +159,19 @@
   }
 
   private static void registerResourceManagerFactory() {
-    ResourceManager.register( new ResourceManagerFactory() );
+	try {
+	  ResourceManager.register( new ResourceManagerFactory() );
+    } catch( Exception e ) {
+      String text =   "Could not register resource manager factory ''{0}''.";
+      Object[] param = new Object[] { ResourceManagerFactory.class.getName() };
+      String msg = MessageFormat.format( text, param );
+      Status status = new Status( IStatus.WARNING,
+                                  PlatformUI.PLUGIN_ID,
+                                  IStatus.OK,
+                                  msg,
+                                  e );
+      WorkbenchPlugin.getDefault().getLog().log( status );
+    }
   }
 
   private static void registerSettingStoreFactory() {
@@ -173,7 +206,19 @@
     if( result == null ) {
       result = new WorkbenchFileSettingStoreFactory(); // default
     }
-    SettingStoreManager.register( result );
+    try {
+		SettingStoreManager.register( result );
+	} catch (Exception e) {
+	      String text =   "Could not register setting store factory ''{0}''.";
+	      Object[] param = new Object[] { result };
+	      String msg = MessageFormat.format( text, param );
+	      Status status = new Status( IStatus.WARNING,
+	                                  PlatformUI.PLUGIN_ID,
+	                                  IStatus.OK,
+	                                  msg,
+	                                  e );
+	      WorkbenchPlugin.getDefault().getLog().log( status );
+	}
   }
 
   private static void registerFactories() {
Index: .settings/org.eclipse.jdt.ui.prefs
===================================================================
RCS file: /cvsroot/rt/org.eclipse.rap/runtime.ui/org.eclipse.rap.ui.workbench/.settings/org.eclipse.jdt.ui.prefs,v
retrieving revision 1.3
diff -u -r1.3 org.eclipse.jdt.ui.prefs
--- .settings/org.eclipse.jdt.ui.prefs	12 Jun 2008 16:29:53 -0000	1.3
+++ .settings/org.eclipse.jdt.ui.prefs	6 Nov 2008 12:36:00 -0000
@@ -1,8 +1,60 @@
-#Thu Jun 12 18:28:24 CEST 2008
+#Thu Oct 16 16:09:14 CEST 2008
 eclipse.preferences.version=1
+editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false
 instance/org.eclipse.core.net/org.eclipse.core.net.hasMigrated=true
 org.eclipse.jdt.ui.exception.name=e
 org.eclipse.jdt.ui.gettersetter.use.is=true
 org.eclipse.jdt.ui.javadoc=true
 org.eclipse.jdt.ui.overrideannotation=true
 org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment"/><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment"/><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment"/><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user} */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment"/><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment"/><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment"/><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) 2008 Innoopract Informationssysteme GmbH.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http\://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors\:\n *     Innoopract Informationssysteme GmbH - initial API and implementation\n ******************************************************************************/\n\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template></templates>
+sp_cleanup.add_default_serial_version_id=true
+sp_cleanup.add_generated_serial_version_id=false
+sp_cleanup.add_missing_annotations=true
+sp_cleanup.add_missing_deprecated_annotations=true
+sp_cleanup.add_missing_methods=false
+sp_cleanup.add_missing_nls_tags=false
+sp_cleanup.add_missing_override_annotations=true
+sp_cleanup.add_serial_version_id=false
+sp_cleanup.always_use_blocks=true
+sp_cleanup.always_use_parentheses_in_expressions=true
+sp_cleanup.always_use_this_for_non_static_field_access=false
+sp_cleanup.always_use_this_for_non_static_method_access=false
+sp_cleanup.convert_to_enhanced_for_loop=false
+sp_cleanup.correct_indentation=false
+sp_cleanup.format_source_code=true
+sp_cleanup.format_source_code_changes_only=false
+sp_cleanup.make_local_variable_final=true
+sp_cleanup.make_parameters_final=true
+sp_cleanup.make_private_fields_final=true
+sp_cleanup.make_type_abstract_if_missing_method=false
+sp_cleanup.make_variable_declarations_final=true
+sp_cleanup.never_use_blocks=false
+sp_cleanup.never_use_parentheses_in_expressions=false
+sp_cleanup.on_save_use_additional_actions=true
+sp_cleanup.organize_imports=true
+sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_with_declaring_class=true
+sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
+sp_cleanup.remove_private_constructors=true
+sp_cleanup.remove_trailing_whitespaces=true
+sp_cleanup.remove_trailing_whitespaces_all=true
+sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
+sp_cleanup.remove_unnecessary_casts=true
+sp_cleanup.remove_unnecessary_nls_tags=true
+sp_cleanup.remove_unused_imports=true
+sp_cleanup.remove_unused_local_variables=false
+sp_cleanup.remove_unused_private_fields=true
+sp_cleanup.remove_unused_private_members=false
+sp_cleanup.remove_unused_private_methods=true
+sp_cleanup.remove_unused_private_types=true
+sp_cleanup.sort_members=true
+sp_cleanup.sort_members_all=false
+sp_cleanup.use_blocks=true
+sp_cleanup.use_blocks_only_for_return_and_throw=false
+sp_cleanup.use_parentheses_in_expressions=true
+sp_cleanup.use_this_for_non_static_field_access=true
+sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
+sp_cleanup.use_this_for_non_static_method_access=true
+sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
